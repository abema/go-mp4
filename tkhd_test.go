package mp4

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestTkhdMarshal(t *testing.T) {
	// Version 0
	tkhd := Tkhd{
		FullBox: FullBox{
			Version: 0,
			Flags:   [3]byte{0x00, 0x00, 0x00},
		},
		CreationTimeV0:     0x01234567,
		ModificationTimeV0: 0x12345678,
		TrackIDV0:          0x23456789,
		ReservedV0:         0x3456789a,
		DurationV0:         0x456789ab,
		Reserved:           [2]uint32{0, 0},
		Layer:              23456,  // 0x5ba0
		AlternateGroup:     -23456, // 0xdba0
		Volume:             0x0100,
		Reserved2:          0,
		Matrix: [9]int32{
			0x00010000, 0, 0,
			0, 0x00010000, 0,
			0, 0, 0x40000000,
		},
		Width:  0x56789abc,
		Height: 0x6789abcd,
	}
	expect := []byte{
		0,                // version
		0x00, 0x00, 0x00, // flags
		0x01, 0x23, 0x45, 0x67, // creation time
		0x12, 0x34, 0x56, 0x78, // modification time
		0x23, 0x45, 0x67, 0x89, // track ID
		0x34, 0x56, 0x78, 0x9a, // reserved
		0x45, 0x67, 0x89, 0xab, // duration
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
		0x5b, 0xa0, // layer
		0xdb, 0xa0, // alternate group
		0x01, 0x00, // volume
		0x00, 0x00, // reserved
		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // matrix
		0x56, 0x78, 0x9a, 0xbc, // width
		0x67, 0x89, 0xab, 0xcd, // height
	}

	buf := bytes.NewBuffer(nil)
	n, err := Marshal(buf, &tkhd)
	require.NoError(t, err)
	assert.Equal(t, uint64(len(expect)), n)
	assert.Equal(t, expect, buf.Bytes())
}

func TestTkhdUnmarshal(t *testing.T) {
	// Version 0
	data := []byte{
		0,                // version
		0x00, 0x00, 0x00, // flags (0000 0000 1001)
		0x01, 0x23, 0x45, 0x67, // creation time
		0x12, 0x34, 0x56, 0x78, // modification time
		0x23, 0x45, 0x67, 0x89, // track ID
		0x34, 0x56, 0x78, 0x9a, // reserved
		0x45, 0x67, 0x89, 0xab, // duration
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
		0x5b, 0xa0, // layer
		0xdb, 0xa0, // alternate group
		0x01, 0x00, // volume
		0x00, 0x00, // reserved
		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // matrix
		0x56, 0x78, 0x9a, 0xbc, // width
		0x67, 0x89, 0xab, 0xcd, // height
	}

	buf := bytes.NewReader(data)
	tkhd := Tkhd{}
	n, err := Unmarshal(buf, uint64(buf.Len()), &tkhd)
	require.NoError(t, err)
	assert.Equal(t, uint64(len(data)), n)
	assert.Equal(t, uint8(0), tkhd.Version)
	assert.Equal(t, uint32(0x00), tkhd.GetFlags())
	assert.Equal(t, uint32(0x01234567), tkhd.CreationTimeV0)
	assert.Equal(t, uint32(0x12345678), tkhd.ModificationTimeV0)
	assert.Equal(t, uint32(0x23456789), tkhd.TrackIDV0)
	assert.Equal(t, uint32(0x3456789a), tkhd.ReservedV0)
	assert.Equal(t, uint32(0x456789ab), tkhd.DurationV0)
	assert.Equal(t, [2]uint32{0, 0}, tkhd.Reserved)
	assert.Equal(t, int16(23456), tkhd.Layer)
	assert.Equal(t, int16(-23456), tkhd.AlternateGroup)
	assert.Equal(t, int16(0x0100), tkhd.Volume)
	assert.Equal(t, uint16(0), tkhd.Reserved2)
	assert.Equal(t, [9]int32{
		0x00010000, 0, 0,
		0, 0x00010000, 0,
		0, 0, 0x40000000,
	}, tkhd.Matrix)
	assert.Equal(t, uint32(0x56789abc), tkhd.Width)
	assert.Equal(t, uint32(0x6789abcd), tkhd.Height)
}
